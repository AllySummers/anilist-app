import type { CodegenConfig } from '@graphql-codegen/cli';
import type { NearOperationFileConfig } from '@graphql-codegen/near-operation-file-preset';
import type { TypeScriptPluginConfig } from '@graphql-codegen/typescript';
import type { TypeScriptDocumentsPluginConfig } from '@graphql-codegen/typescript-operations';
import type { plugin as ReactApolloPlugin } from '@graphql-codegen/typescript-react-apollo';
import type { RawConfig } from '@graphql-codegen/visitor-plugin-common';

const rawConfig = {
	useTypeImports: true,
	printFieldsOnNewLines: true,
	extractAllFieldsToTypes: true,
	namingConvention: {
		typeNames: 'change-case-all#pascalCase',
	},
} satisfies RawConfig;

// sadly they don't export the config type for typescript-react-apollo
type ReactApolloPluginConfig = Parameters<typeof ReactApolloPlugin>[2];

const header = `/** @fileoverview
 * This file was generated by GraphQL Codegen.
 * You should not modify this file directly.
 * Please modify the source GraphQL files instead and
 * then run \`npm run codegen\` to update this file.
 */
`;

const reactApolloConfig: Omit<ReactApolloPluginConfig, 'documentMode'> & {
	documentMode?: `${ReactApolloPluginConfig['documentMode']}`;
} = {
	withHooks: true,
	withMutationFn: true,
	withComponent: false,
	withFragmentHooks: true,
	withHOC: false,
	withMutationOptionsType: true,
	withRefetchFn: true,
	withResultType: true,
	reactApolloVersion: 3,
	optimizeDocumentNode: true,
	...rawConfig,
};

const typescriptConfig: TypeScriptPluginConfig = {
	declarationKind: 'interface',
	allowEnumStringTypes: true,
	...rawConfig,
};

const typescriptOperationsConfig: TypeScriptDocumentsPluginConfig = {
	exportFragmentSpreadSubTypes: true,
	preResolveTypes: true,
	...typescriptConfig,
};

const nearOperationFileConfig: NearOperationFileConfig = {
	baseTypesPath: '~@/gql/types',
	importAllFragmentsFrom: '~@/gql/types',
	folder: '__generated__',
	extension: '.ts',
};

const config: CodegenConfig = {
	schema: 'https://graphql.anilist.co/',
	documents: ['src/graphql/**/*.{graphql,gql}'],
	generates: {
		'src/graphql/__generated__/types.ts': {
			plugins: [
				{ typescript: typescriptConfig },
				{
					add: {
						content: header,
					},
				},
			],
			config: {
				preResolveTypes: true,
			},
		},
		'./src/graphql': {
			overwrite: true,
			preset: 'near-operation-file',
			plugins: [
				{
					'typescript-operations': typescriptOperationsConfig,
				},
				{
					'typescript-react-apollo': reactApolloConfig,
				},
			],
			config: {
				preResolveTypes: true,
			},
			presetConfig: nearOperationFileConfig,
			hooks: {
				beforeOneFileWrite: (_path: string, content: string) => {
					const name = /const (.*)Document = gql`/g.exec(content)?.[1];

					if (name) {
						return `${header}
import { query } from '@/apollo/register-apollo-client';
${content}
export const query${name} = (
	options: Omit<Apollo.QueryOptions<${name}QueryVariables, ${name}Query>, 'query'>,
) =>
	query<${name}Query, ${name}QueryVariables>({
		query: ${name}Document,
		...options,
	});
`;
					}
				},
				// not sure why i couldn't get this to work, so i opted to add a `script` in the `package.json` instead to do both
				// afterAllFileWrite: 'npm run codegen:format',
			},
		},
	},
};

export default config;
