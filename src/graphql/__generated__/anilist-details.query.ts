/* eslint-disable */
// prettier-ignore
/** @fileoverview
 * This file was generated by GraphQL Codegen.
 * You should not modify this file directly.
 * Please modify the source GraphQL files instead and
 * then run `npm run codegen` to update this file.
 */

import { query } from '@/apollo/register-apollo-client';
import type * as Types from '@/gql/types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type AnilistDetailsQueryVariables = Types.Exact<{
  id?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  type?: Types.InputMaybe<Types.MediaType>;
  isAdult?: Types.InputMaybe<Types.Scalars['Boolean']['input']>;
}>;


export type AnilistDetailsQuery = { __typename?: 'Query', Media?: { __typename?: 'Media', id: number, bannerImage?: string | null, description?: string | null, season?: Types.MediaSeason | null, seasonYear?: number | null, type?: Types.MediaType | null, format?: Types.MediaFormat | null, status?: Types.MediaStatus | null, episodes?: number | null, duration?: number | null, chapters?: number | null, volumes?: number | null, genres?: Array<string | null> | null, synonyms?: Array<string | null> | null, source?: Types.MediaSource | null, isAdult?: boolean | null, isLocked?: boolean | null, meanScore?: number | null, averageScore?: number | null, popularity?: number | null, favourites?: number | null, isFavouriteBlocked: boolean, hashtag?: string | null, countryOfOrigin?: any | null, isLicensed?: boolean | null, isFavourite: boolean, isRecommendationBlocked?: boolean | null, isReviewBlocked?: boolean | null, title?: { __typename?: 'MediaTitle', romaji?: string | null, english?: string | null, native?: string | null } | null, coverImage?: { __typename?: 'MediaCoverImage', extraLarge?: string | null, large?: string | null } | null, startDate?: { __typename?: 'FuzzyDate', year?: number | null, month?: number | null, day?: number | null } | null, endDate?: { __typename?: 'FuzzyDate', year?: number | null, month?: number | null, day?: number | null } | null, nextAiringEpisode?: { __typename?: 'AiringSchedule', airingAt: number, timeUntilAiring: number, episode: number } | null, characterPreview?: { __typename?: 'CharacterConnection', edges?: Array<{ __typename?: 'CharacterEdge', id?: number | null, role?: Types.CharacterRole | null, name?: string | null, voiceActors?: Array<{ __typename?: 'Staff', id: number, language?: string | null, name?: { __typename?: 'StaffName', userPreferred?: string | null } | null, image?: { __typename?: 'StaffImage', large?: string | null } | null } | null> | null, node?: { __typename?: 'Character', id: number, name?: { __typename?: 'CharacterName', userPreferred?: string | null } | null, image?: { __typename?: 'CharacterImage', large?: string | null } | null } | null } | null> | null } | null, studios?: { __typename?: 'StudioConnection', edges?: Array<{ __typename?: 'StudioEdge', isMain: boolean, node?: { __typename?: 'Studio', id: number, name: string } | null } | null> | null } | null, externalLinks?: Array<{ __typename?: 'MediaExternalLink', id: number, site: string, url?: string | null, type?: Types.ExternalLinkType | null, language?: string | null, color?: string | null, icon?: string | null, notes?: string | null, isDisabled?: boolean | null } | null> | null, streamingEpisodes?: Array<{ __typename?: 'MediaStreamingEpisode', site?: string | null, title?: string | null, thumbnail?: string | null, url?: string | null } | null> | null, trailer?: { __typename?: 'MediaTrailer', id?: string | null, site?: string | null } | null, rankings?: Array<{ __typename?: 'MediaRank', id: number, rank: number, type: Types.MediaRankType, format: Types.MediaFormat, year?: number | null, season?: Types.MediaSeason | null, allTime?: boolean | null, context: string } | null> | null, tags?: Array<{ __typename?: 'MediaTag', id: number, name: string, description?: string | null, rank?: number | null, isMediaSpoiler?: boolean | null, isGeneralSpoiler?: boolean | null, userId?: number | null } | null> | null, mediaListEntry?: { __typename?: 'MediaList', id: number, status?: Types.MediaListStatus | null, score?: number | null } | null } | null };


export const AnilistDetailsDocument = gql`
    query AnilistDetails($id: Int, $type: MediaType, $isAdult: Boolean) {
  Media(id: $id, type: $type, isAdult: $isAdult) {
    id
    title {
      romaji
      english
      native
    }
    coverImage {
      extraLarge
      large
    }
    bannerImage
    startDate {
      year
      month
      day
    }
    endDate {
      year
      month
      day
    }
    description
    season
    seasonYear
    type
    format
    status(version: 2)
    episodes
    duration
    chapters
    volumes
    genres
    synonyms
    source(version: 3)
    isAdult
    isLocked
    meanScore
    averageScore
    popularity
    favourites
    isFavouriteBlocked
    hashtag
    countryOfOrigin
    isLicensed
    isFavourite
    isRecommendationBlocked
    isFavouriteBlocked
    isReviewBlocked
    nextAiringEpisode {
      airingAt
      timeUntilAiring
      episode
    }
    characterPreview: characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {
      edges {
        id
        role
        name
        voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {
          id
          name {
            userPreferred
          }
          language: languageV2
          image {
            large
          }
        }
        node {
          id
          name {
            userPreferred
          }
          image {
            large
          }
        }
      }
    }
    studios {
      edges {
        isMain
        node {
          id
          name
        }
      }
    }
    externalLinks {
      id
      site
      url
      type
      language
      color
      icon
      notes
      isDisabled
    }
    streamingEpisodes {
      site
      title
      thumbnail
      url
    }
    trailer {
      id
      site
    }
    rankings {
      id
      rank
      type
      format
      year
      season
      allTime
      context
    }
    tags {
      id
      name
      description
      rank
      isMediaSpoiler
      isGeneralSpoiler
      userId
    }
    mediaListEntry {
      id
      status
      score
    }
  }
}
    `;

/**
 * __useAnilistDetailsQuery__
 *
 * To run a query within a React component, call `useAnilistDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnilistDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnilistDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      type: // value for 'type'
 *      isAdult: // value for 'isAdult'
 *   },
 * });
 */
export function useAnilistDetailsQuery(baseOptions?: Apollo.QueryHookOptions<AnilistDetailsQuery, AnilistDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AnilistDetailsQuery, AnilistDetailsQueryVariables>(AnilistDetailsDocument, options);
      }
export function useAnilistDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AnilistDetailsQuery, AnilistDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AnilistDetailsQuery, AnilistDetailsQueryVariables>(AnilistDetailsDocument, options);
        }
export function useAnilistDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AnilistDetailsQuery, AnilistDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AnilistDetailsQuery, AnilistDetailsQueryVariables>(AnilistDetailsDocument, options);
        }
export type AnilistDetailsQueryHookResult = ReturnType<typeof useAnilistDetailsQuery>;
export type AnilistDetailsLazyQueryHookResult = ReturnType<typeof useAnilistDetailsLazyQuery>;
export type AnilistDetailsSuspenseQueryHookResult = ReturnType<typeof useAnilistDetailsSuspenseQuery>;
export type AnilistDetailsQueryResult = Apollo.QueryResult<AnilistDetailsQuery, AnilistDetailsQueryVariables>;
export function refetchAnilistDetailsQuery(variables?: AnilistDetailsQueryVariables) {
      return { query: AnilistDetailsDocument, variables: variables }
    }
export const queryAnilistDetails = (
	options: Omit<Apollo.QueryOptions<AnilistDetailsQueryVariables, AnilistDetailsQuery>, 'query'>,
) =>
	query<AnilistDetailsQuery, AnilistDetailsQueryVariables>({
		query: AnilistDetailsDocument,
		...options,
	});
